{"version":3,"file":"cart.mjs","sources":["../../../projects/cart/src/lib/cart.service.ts","../../../projects/cart/src/lib/cart.tokens.ts","../../../projects/cart/src/lib/cart.module.ts","../../../projects/cart/src/public-api.ts","../../../projects/cart/src/cart.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from './product.model';\n\n@Injectable()\nexport class CartService {\n  products: Product[] = [];\n\n  constructor() {}\n\n  add(product: Product) {\n    this.products.push(product);\n  }\n\n  remove(id: number) {\n    this.products = this.products.filter(\n      (product: Product) => product.id !== id,\n    );\n  }\n\n  count(): number {\n    return this.products.length;\n  }\n\n  clear(): void {\n    this.products = [];\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CART_FORROOT_GUARD = new InjectionToken<void>('CART FORROOT GUARD');\n","import {\n  Inject,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { CART_FORROOT_GUARD } from './cart.tokens';\nimport { CartService } from './cart.service';\n\nexport function cartForRootGuard(cartService: CartService): boolean {\n  return !!cartService;\n}\n\n@NgModule({\n  providers: [CartService],\n})\nexport class CartModule {\n  constructor(\n    @Optional() @Inject(CART_FORROOT_GUARD) isAlreadyLoaded: boolean,\n  ) {\n    if (isAlreadyLoaded) {\n      throw new TypeError(\n        `*** CartModule.forRoot() called twice. Lazy loaded modules should use CartModule.forChild() instead. ***`,\n      );\n    }\n  }\n\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartService,\n        {\n          provide: CART_FORROOT_GUARD,\n          useFactory: cartForRootGuard,\n          deps: [[CartService, new Optional(), new SkipSelf()]],\n        },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n    };\n  }\n}\n","/*\n * Public API Surface of cart\n */\n\nexport * from './lib/cart.service';\nexport * from './lib/cart.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;MAIa,WAAW,CAAA;AAGtB,IAAA,WAAA,GAAA;AAFA,QAAA,IAAQ,CAAA,QAAA,GAAc,EAAE,CAAC;KAET;AAEhB,IAAA,GAAG,CAAC,OAAgB,EAAA;AAClB,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7B;AAED,IAAA,MAAM,CAAC,EAAU,EAAA;QACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAClC,CAAC,OAAgB,KAAK,OAAO,CAAC,EAAE,KAAK,EAAE,CACxC,CAAC;KACH;IAED,KAAK,GAAA;AACH,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;KAC7B;IAED,KAAK,GAAA;AACH,QAAA,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;;wGArBU,WAAW,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;4GAAX,WAAW,EAAA,CAAA,CAAA;2FAAX,WAAW,EAAA,UAAA,EAAA,CAAA;kBADvB,UAAU;;;ACDJ,MAAM,kBAAkB,GAAG,IAAI,cAAc,CAAO,oBAAoB,CAAC;;ACQ1E,SAAU,gBAAgB,CAAC,WAAwB,EAAA;IACvD,OAAO,CAAC,CAAC,WAAW,CAAC;AACvB,CAAC;MAKY,UAAU,CAAA;AACrB,IAAA,WAAA,CAC0C,eAAwB,EAAA;AAEhE,QAAA,IAAI,eAAe,EAAE;AACnB,YAAA,MAAM,IAAI,SAAS,CACjB,CAAA,wGAAA,CAA0G,CAC3G,CAAC;AACH,SAAA;KACF;AAED,IAAA,OAAO,OAAO,GAAA;QACZ,OAAO;AACL,YAAA,QAAQ,EAAE,UAAU;AACpB,YAAA,SAAS,EAAE;gBACT,WAAW;AACX,gBAAA;AACE,oBAAA,OAAO,EAAE,kBAAkB;AAC3B,oBAAA,UAAU,EAAE,gBAAgB;AAC5B,oBAAA,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;AACtD,iBAAA;AACF,aAAA;SACF,CAAC;KACH;AAED,IAAA,OAAO,QAAQ,GAAA;QACb,OAAO;AACL,YAAA,QAAQ,EAAE,UAAU;SACrB,CAAC;KACH;;AA7BU,UAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,UAAU,kBAEC,kBAAkB,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;wGAF7B,UAAU,EAAA,CAAA,CAAA;wGAAV,UAAU,EAAA,SAAA,EAFV,CAAC,WAAW,CAAC,EAAA,CAAA,CAAA;2FAEb,UAAU,EAAA,UAAA,EAAA,CAAA;kBAHtB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACR,SAAS,EAAE,CAAC,WAAW,CAAC;iBACzB,CAAA;;;8BAGI,QAAQ;;8BAAI,MAAM;+BAAC,kBAAkB,CAAA;;;;ACnB1C;;AAEG;;ACFH;;AAEG;;;;"}